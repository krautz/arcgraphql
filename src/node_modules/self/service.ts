/**
 * IMPORTS
 */
import {ApolloServer} from 'apollo-server';
import {gql} from 'apollo-server';
import fs from 'fs';
import path from 'path';
import {RedditMediator} from 'self/datasources/redditmediator';
import * as resolvers from 'self/resolvers';
import {logRequest} from 'self/utils';


/**
 * TYPES
 */
import {PlaygroundConfig} from 'apollo-server';
import {DataSources} from 'apollo-server-core/dist/graphqlOptions.d';
import {IDataSources} from 'self/datasources/index.d';
import {IServer} from 'self/service.d';


/**
 * CONSTANTS AND DEFINITIONS
 */
const SCHEMA_PATH = '../../schema.graphql';


/**
 * CODE
 */

/**
 * I start service.
 *
 * :returns: nothing
 */
function run (): void
{
    // get playground endpoint
    const playgourndEndpoint = process.env.PLAYGROUND_ENDPOINT;

    // set playground options
    let playground: PlaygroundConfig | undefined;

    // playground is configured: set its configuration
    if (playgourndEndpoint !== undefined)
    {
        playground = {
            endpoint: playgourndEndpoint,
        };
    }

    // get path to schema file
    const file: string = path.resolve(__dirname, SCHEMA_PATH);

    // create graphQL schema
    const typeDefs = gql`${fs.readFileSync(file, 'utf8')}`;

    // get reddit mediator url (or use default one)
    const redditMediatorURL = process.env.REDDIT_MEDIATOR_URL ||
                              'http://redditmediator';

    // create server
    const server = new ApolloServer({
        context: logRequest,
        dataSources: (): DataSources<IDataSources> => ({
            redditMediator: new RedditMediator(redditMediatorURL),
        }),
        playground,
        resolvers,
        typeDefs
    });

    // start server
    server.listen().then(({url}: IServer): void =>
    {
        // eslint-disable-next-line no-console
        console.log(`ðŸš€ app running at ${url}`);
    });
}


/**
 * EXPORTS
 */
export {
    run,
};
