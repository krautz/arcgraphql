/**
 * IMPORTS
 */
import {reduce} from 'self/reducers/post';


/**
 * TYPES
 */
import {IArgs} from 'self/resolvers/query/posts.d';
import {IPost as ISchema} from 'self/schema.d';
import {IContext} from 'self/service.d';


/**
 * CODE
 */

/**
 * I request online agents of a company.
 *
 * :param parent: parent type
 * :param args: arguments
 * :param context: common server context
 *
 * :returns: promise with agents
 */
const posts = async (
    parent: undefined,
    args: IArgs,
    context: IContext
): Promise<ISchema[] | null> =>
{
    // get sort type and number of posts to get from each subreddit
    const {sort} = args;
    const {limit} = args;

    // invalid type: return null
    if (sort !== 'hot' && sort !== 'new')
    {
        return null;
    }

    // valid type: get reddit mediator data source
    const {redditMediator} = context.dataSources;

    // request posts
    const posts = await redditMediator.getPosts(sort, limit);

    // return reduced posts (or null, if request failed)
    return posts !== null ? posts.map(reduce) : null;
};


/**
 * EXPORTS
 */
export {
    posts,
};
