/**
 * IMPORTS
 */
import {Requester} from 'self/datasources/requester';
import {isFailure} from 'self/datasources/utils';


/**
 * TYPES
 */
import {IPost} from 'self/datasources/redditmediator.d';
import {IPostsBody} from 'self/datasources/redditmediator.d';
import {IResponse} from 'self/datasources/requester.d';


/**
 * CODE
 */

/**
 * I am a data source layer for Reddit Mediator.
 */
class RedditMediator extends Requester
{
    // define fields
    baseURL: string;


    /**
     * I initialize myself.
     *
     * :param url: service url configuration
     */
    constructor (url: string)
    {
        // call parent constructor
        super();

        // configure conversis base url
        this.baseURL = url;
    }


    /**
     * I request posts.
     *
     * :param sort: posts sort type
     * :param limit: ammount of posts from each subreddit
     *
     * :returns: promise with posts
     */
    async getPosts (
        sort: string,
        limit?: number
    ): Promise<IPost[] | null>
    {
        // build base url
        let url = `/posts/${sort}`;

        // limit present -> add it to url
        if (limit !== undefined)
        {
            url += `/?limit=${limit}`;
        }

        // request posts
        const response: IResponse<void, IPostsBody> = await this.get(url);

        // request failed: return nothing
        if (isFailure(response))
        {
            return null;
        }

        // request succeeded: return posts
        return response.body.Data;
    }
}


/**
 * EXPORTS
 */
export {RedditMediator};
