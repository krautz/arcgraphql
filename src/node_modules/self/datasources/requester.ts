/**
 * IMPORTS
 */
import {RESTDataSource} from 'apollo-datasource-rest';


/**
 * TYPES
 */
import {Request as IRequest} from 'apollo-server-env';
import {Response as IResponse} from 'apollo-server-env';
import {IBaseResponse} from 'self/datasources/requester.d';


/**
 * CODE
 */


/**
 * I am an abstract data source requester.
 */
class Requester extends RESTDataSource
{
    /**
     * I initialize myself.
     */
    constructor ()
    {
        // call parent constructor
        super();
    }

    /**
     * I parse the request and response.
     *
     * :param response: http response
     * :param request: http request
     *
     * :returns: promise with response properties
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    protected async didReceiveResponse <TResult = IBaseResponse<any>> (
        response: IResponse,
        request: IRequest
    ): Promise<TResult>
    {
        // get request properties
        const url = request.url;
        const method = request.method;
        const requestBody = await request.text();

        // get response properties
        const failure = !response.ok;
        const status = response.status;

        // initialize response body
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        let responseBody: any = await response.text();

        // body is empty: set it as null
        if (responseBody === '')
        {
            responseBody = null;
        }

        // body is not empty: parse it
        else
        {
            responseBody = JSON.parse(responseBody);
        }

        // log the request and response
        console.log( // eslint-disable-line no-console
            `"${method}" to "${url}" with body "${requestBody}" got status ` +
            `"${status}"`
        );

        // return response properties
        const result = {body: responseBody, failure, status};
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return (result as any) as Promise<TResult>;
    }
}


/**
 * EXPORTS
 */
export {
    Requester,
};
